/**
 * Overview of framework functions grouped by inlude location (this documentation can't be used as a header file).
 */


// include/configuration.mqh
string   GetAccountConfigPath(string company="", int account=NULL);;


bool     IsConfigKey               (string section, string key);;
bool     IsAccountConfigKey        (string section, string key);;

bool     GetConfigBool             (string section, string key, bool defaultValue = false);;
bool     GetGlobalConfigBool       (string section, string key, bool defaultValue = false);;
bool     GetTerminalConfigBool     (string section, string key, bool defaultValue = false);;
bool     GetAccountConfigBool      (string section, string key, bool defaultValue = false);;

color    GetConfigColor            (string section, string key, color defaultValue = CLR_NONE);;
color    GetGlobalConfigColor      (string section, string key, color defaultValue = CLR_NONE);;
color    GetTerminalConfigColor    (string section, string key, color defaultValue = CLR_NONE);;
color    GetAccountConfigColor     (string section, string key, color defaultValue = CLR_NONE);;

int      GetConfigInt              (string section, string key, int defaultValue = 0);;
int      GetGlobalConfigInt        (string section, string key, int defaultValue = 0);;
int      GetTerminalConfigInt      (string section, string key, int defaultValue = 0);;
int      GetAccountConfigInt       (string section, string key, int defaultValue = 0);;

double   GetConfigDouble           (string section, string key, double defaultValue = 0);;
double   GetGlobalConfigDouble     (string section, string key, double defaultValue = 0);;
double   GetTerminalConfigDouble   (string section, string key, double defaultValue = 0);;
double   GetAccountConfigDouble    (string section, string key, double defaultValue = 0);;

string   GetConfigString           (string section, string key, string defaultValue = "");;
string   GetGlobalConfigString     (string section, string key, string defaultValue = "");;
string   GetTerminalConfigString   (string section, string key, string defaultValue = "");;
string   GetAccountConfigString    (string section, string key, string defaultValue = "");;

string   GetConfigStringRaw        (string section, string key, string defaultValue = "");;
string   GetGlobalConfigStringRaw  (string section, string key, string defaultValue = "");;
string   GetTerminalConfigStringRaw(string section, string key, string defaultValue = "");;
string   GetAccountConfigStringRaw (string section, string key, string defaultValue = "");;

bool     GetIniBool  (string fileName, string section, string key, bool   defaultValue = false);;
color    GetIniColor (string fileName, string section, string key, color  defaultValue = CLR_NONE);;
int      GetIniInt   (string fileName, string section, string key, int    defaultValue = 0);;
double   GetIniDouble(string fileName, string section, string key, double defaultValue = 0);;

bool     WriteIniString(string fileName, string section, string key, string value);;


// include/log.mqh
int      catch(string caller, int error=NO_ERROR, bool popOrder=false);;
int      debug(string message, int error=NO_ERROR, int loglevel=NULL);;

bool     IsLog();;
bool     IsLogDebug();;
bool     IsLogInfo();;
bool     IsLogNotice();;
bool     IsLogWarn();;
bool     IsLogError();;
bool     IsLogFatal();;

int      log      (string message, int error, int level);;
int      logDebug (string message, int error = NO_ERROR);;
int      logInfo  (string message, int error = NO_ERROR);;
int      logNotice(string message, int error = NO_ERROR);;
int      logWarn  (string message, int error = NO_ERROR);;
int      logError (string message, int error);;
int      logFatal (string message, int error);;

int      log2Alert   (string message, int error, int level);;
int      log2Debugger(string message, int error, int level);;
int      log2File    (string message, int error, int level);;
int      log2Mail    (string message, int error, int level);;
int      log2SMS     (string message, int error, int level);;
int      log2Terminal(string message, int error, int level);;

bool     SetLogfile(string filename);;


// include/scriptrunner.mqh
bool     RunScript(string name, string parameters = "");;
bool     ScriptRunner.GetParameters(string &parameters[]);;
bool     ScriptRunner.SetParameters(string parameters);;


// include/stdfunctions.mqh
bool     _bool       (bool   param1,      int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
double   _double     (double param1,      int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      _EMPTY      (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
string   _EMPTY_STR  (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      _EMPTY_VALUE(int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
bool     _false      (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      _int        (int    param1,      int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      _last_error (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
datetime _NaT        (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      _NO_ERROR   (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      _NULL       (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
string   _string     (string param1,      int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
bool     _true       (int    param1=NULL, int param2=NULL, int param3=NULL, int param4=NULL, int param5=NULL, int param6=NULL, int param7=NULL, int param8=NULL);;
int      Abs(int value);;
int      ArrayUnshiftString(string &array[], string value);;
int      Ceil(double value);;
int      Chart.Expert.Properties();;
int      Chart.Objects.UnselectAll();;
int      Chart.Refresh();;
bool     Chart.RestoreBool  (string key, bool   &var, bool remove = true);;
bool     Chart.RestoreColor (string key, color  &var, bool remove = true);;
bool     Chart.RestoreDouble(string key, double &var, bool remove = true);;
bool     Chart.RestoreInt   (string key, int    &var, bool remove = true);;
bool     Chart.RestoreString(string key, string &var, bool remove = true);;
int      Chart.SendTick(bool sound = false);;
bool     Chart.StoreBool  (string key, bool   value);;
bool     Chart.StoreColor (string key, color  value);;
bool     Chart.StoreDouble(string key, double value);;
bool     Chart.StoreInt   (string key, int    value);;
bool     Chart.StoreString(string key, string value);;
string   ColorToHtmlStr(color value);;
string   ColorToRGBStr(color value);;
string   ColorToStr(color value);;
void     CopyMemory(int destination, int source, int bytes);;
int      CountDecimals(double number);;
bool     CreateDirectory(string path, int flags);;
string   CreateLegend();;
string   CreateString(int length);;
datetime DateTime1(int year, int month=1, int day=1, int hours=0, int minutes=0, int seconds=0);;
datetime DateTime2(int parsed[], int flags = DATE_OF_TODAY);;
int      DebugMarketInfo(string caller);;
int      Div(int a, int b, int onZero = 0);;
double   doubleOr(double value, double altValue);;
bool     EnumChildWindows(int hWnd, bool recursive = false);;
bool     EQ(double double1, double double2, int digits = 8);;
string   ErrorDescription(int error);;
string   FileAccessModeToStr(int mode);;
string   FindStandardSymbol(string symbol, bool strict = false);;
int      Floor(double value);;
void     ForceAlert(string message);;
datetime FxtToGmtTime(datetime time);;
datetime FxtToServerTime(datetime time);;
bool     GE(double double1, double double2, int digits = 8);;
string   GetAccountAlias(string company="", int account=NULL);;
string   GetAccountCompanyId();;
int      GetAccountNumberFromAlias(string company, string alias);;
string   GetClassName(int hWnd);;
double   GetCommission(double lots=1.0, int mode=MODE_MONEY);;
string   GetCurrency(int id);;
int      GetCurrencyId(string currency);;
double   GetExternalAssets(string company="", int account=NULL, bool refresh=false);;
datetime GetFxtTime();;
string   GetMqlSandboxPath();;
datetime GetNextSessionEndTime(datetime time, int tz);;
datetime GetNextSessionStartTime(datetime time, int tz);;
datetime GetPrevSessionEndTime(datetime time, int tz);;
datetime GetPrevSessionStartTime(datetime time, int tz);;
int      GetRandomValue(int min, int max);;
datetime GetServerTime();;
datetime GetSessionEndTime(datetime time, int tz);;
datetime GetSessionStartTime(datetime time, int tz);;
string   GmtTimeFormat(datetime timestamp, string format);;
datetime GmtToFxtTime(datetime time);;
datetime GmtToServerTime(datetime time);;
bool     GT(double double1, double double2, int digits = 8);;
string   HistoryFlagsToStr(int flags);;
double   icALMA(int timeframe, int maPeriods, string maAppliedPrice, double distributionOffset, double distributionSigma, double maReversalFilter, int iBuffer, int iBar);;
bool     icChartInfos();;
double   icFATL(NULL, NULL, NULL);;
double   icHalfTrend(int timeframe, int periods, int iBuffer, int iBar);;
double   icJMA(int timeframe, int periods, int phase, string appliedPrice, int iBuffer, int iBar);;
double   icMACD(int timeframe, int fastMaPeriods, string fastMaMethod, string fastMaAppliedPrice, int slowMaPeriods, string slowMaMethod, string slowMaAppliedPrice, int iBuffer, int iBar);;
double   icMovingAverage(int timeframe, int maPeriods, string maMethod, string maAppliedPrice, int iBuffer, int iBar);;
double   icNLMA(int timeframe, int waveCyclePeriods, string maAppliedPrice, double maReversalFilter, int iBuffer, int iBar);;
double   icRSI(int timeframe, int periods, string appliedPrice, int iBuffer, int iBar);;
double   icSATL(NULL, NULL, NULL);;
double   icStochasticOfRSI(int timeframe, int stochMainPeriods, int stochSlowedMainPeriods, int stochSignalPeriods, int rsiPeriods, int iBuffer, int iBar);;
double   icSuperSmoother(int timeframe, int periods, string appliedPrice, int iBuffer, int iBar);;
double   icSuperTrend(int timeframe, int atrPeriods, int smaPeriods, int iBuffer, int iBar);;
double   icTriEMA(int timeframe, int periods, string appliedPrice, int iBuffer, int iBar);;
double   icTrix(int timeframe, int periods, string appliedPrice, int iBuffer, int iBar);;
double   icZigZag(int timeframe, int periods, int iBuffer, int iBar);;
bool     ifBool(bool condition, bool thenValue, bool elseValue);;
double   ifDouble(bool condition, double thenValue, double elseValue);;
int      ifInt(bool condition, int thenValue, int elseValue);;
string   ifString(bool condition, string thenValue, string elseValue);;
string   InitReasonDescription(int reason);;
int      intOr(int value, int altValue);;
bool     IsAbsolutePath(string path);;
bool     IsCurrency(string value);;
bool     IsDirectory(string path, int mode);;
bool     IsDLLError();;
bool     IsEmpty(double value);;
bool     IsEmptyString(string value);;
bool     IsEmptyValue(double value);;
bool     IsError(int value);;
bool     IsFile(string path, int mode);;
bool     IsInfinity(double value);;
bool     IsLastError();;
bool     IsLeapYear(int year);;
bool     IsLimitOrderType(int value);;
bool     IsLog();;
bool     IsLongOrderType(int value);;
bool     IsMQLError();;
bool     IsNaN(double value);;
bool     IsNaT(datetime value);;
bool     IsOrderType(int value);;
bool     IsPendingOrderType(int value);;
bool     IsShortOrderType(int value);;
bool     IsStopOrderType(int value);;
bool     IsTicket(int ticket);;
bool     IsVisualModeFix();;
string   JoinStrings(string values[], string separator = ", ");;
bool     LE(double double1, double double2, int digits = 8);;
string   LocalTimeFormat(datetime timestamp, string format);;
string   LoglevelDescription(int level);;                      // also implemented in MT4Expander
bool     LT(double double1, double double2, int digits = 8);;
string   MaMethodDescription(int method, bool strict = true);;
string   MaMethodToStr(int method);;
double   MarketInfoEx(string symbol, int mode, int &error, string caller = "");;
string   MarketInfoModeToStr(int mode);;
int      MarketWatch.Symbols();;
double   MathDiv(double a, double b, double onZero = 0);;
double   MathModFix(double a, double b);;
int      Max(int value1, int value2, int value3=INT_MIN, int value4=INT_MIN, int value5=INT_MIN, int value6=INT_MIN, int value7=INT_MIN, int value8=INT_MIN);;
string   MessageBoxButtonToStr(int id);;
int      MessageBoxEx(string caption, string message, int flags = MB_OK);;
int      Min(int value1, int value2, int value3=INT_MAX, int value4=INT_MAX, int value5=INT_MAX, int value6=INT_MAX, int value7=INT_MAX, int value8=INT_MAX);;
string   ModuleTypesToStr(int fType);;
string   ModuleName(bool fullName = false);;
int      Mul(int a, int b, bool boundaryOnOverflow = false);;
color    NameToColor(string name);;
bool     NE(double double1, double double2, int digits = 8);;
double   NormalizeLots(double lots, string symbol="", int mode=MODE_DEFAULT);;
string   NumberToStr(double value, string mask);;
string   ObjectTypeToStr(int type);;
string   OperationTypeDescription(int type);;
string   OperationTypeToStr(int type);;
bool     OrderLogMessage(int ticket);;
bool     OrderPop(string caller = "");;
bool     OrderPush(string caller = "");;
string   OrderTypeToStr(int type);;
string   PeriodDescription(int period = NULL);;
int      PeriodFlag(int period = NULL);;
string   PeriodFlagToStr(int flag);;
string   PipToStr(double value, bool thousandsSeparator=false, bool appendSuffix=false);;
double   PipValue(double lots=1.0, bool suppressErrors=false);;
double   PipValueEx(string symbol, double lots, int &error, string caller = "");;
int      PlaySoundEx(string soundfile);;
string   Pluralize(int count, string singular="", string plural="s");;
string   PriceTypeDescription(int type);;
string   PriceTypeToStr(int type);;
int      ProgramInitReason();;
string   ProgramName();;
string   QuoteStr(string value);;
int      ResetLastError();;
color    RGBStrToColor(string value);;
int      Round(double value);;
double   RoundCeil(double number, int decimals = 0);;
double   RoundEx(double number, int decimals = 0);;
double   RoundFloor(double number, int decimals = 0);;
bool     SelectTicket(int ticket, string caller, bool pushTicket=false, bool onErrorPopTicket=false);;
bool     SendChartCommand(string cmdObject, string cmd, string cmdMutex = "");;
bool     SendEmail(string sender, string receiver, string subject, string message);;
bool     SendSMS(string receiver, string message);;
datetime ServerToFxtTime(datetime time);;
datetime ServerToGmtTime(datetime time);;
string   ShellExecuteErrorDescription(int error);;
int      Sign(double value);;
string   StdSymbol();;
string   StrCapitalize(string value);;
bool     StrCompareI(string string1, string string2);;
bool     StrContains(string value, string substring);;
bool     StrContainsI(string value, string substring);;
bool     StrEndsWithI(string value, string suffix);;
int      StrFindR(string value, string search);;
string   stringOr(string value, string altValue);;
bool     StrIsDigits(string value);;
bool     StrIsEmailAddress(string value);;
bool     StrIsInteger(string value);;
bool     StrIsNumeric(string value);;
bool     StrIsPhoneNumber(string value);;
string   StrLeft(string value, int n);;
string   StrLeftPad(string input, int pad_length, string pad_string = " ");;
string   StrLeftTo(string value, string substring, int count = 1);;
string   StrPadLeft(string input, int pad_length, string pad_string = " ");;
string   StrPadRight(string input, int pad_length, string pad_string = " ");;
string   StrRepeat(string input, int times);;
string   StrReplace(string value, string search, string replace, bool recursive = false);;
string   StrRight(string value, int n);;
string   StrRightFrom(string value, string substring, int count = 1);;
string   StrRightPad(string input, int pad_length, string pad_string = " ");;
bool     StrStartsWithI(string value, string prefix);;
string   StrSubstr(string str, int start, int length = INT_MAX);;
bool     StrToBool(string value, bool strict = false);;
string   StrToHexStr(string value);;
int      StrToLogLevel(string value, int flags = NULL);;
string   StrToLower(string value);;
int      StrToMaMethod(string value, int flags = NULL);;
int      StrToOperationType(string value);;
int      StrToPeriod(string value, int flags = NULL);;
int      StrToPriceType(string value, int execFlags = NULL);;
int      StrToTimeframe(string timeframe, int flags = NULL);;
int      StrToTradeDirection(string value, int flags = NULL);;
string   StrToUpper(string value);;
string   StrTrim(string value);;
int      SumInts(int &values[]);;
string   SwapCalculationModeToStr(int mode);;
int      Tester.GetBarModel();;
bool     Tester.IsPaused();;
bool     Tester.IsStopped();;
int      Tester.Pause(string caller = "");;
int      Tester.Stop(string caller = "");;
datetime TimeCurrentEx(string caller, bool useLastBar=false, bool strict=true);;
int      TimeDayEx(datetime time);;
int      TimeDayOfWeekEx(datetime time);;
string   TimeframeDescription(int timeframe = NULL);;
int      TimeframeFlag(int timeframe = NULL);;
string   TimeframeFlagToStr(int flag);;
datetime TimeFXT();;
datetime TimeGMT();;
datetime TimeLocalEx(string caller, bool strict = true);;
datetime TimeServer(string caller="", bool useLastBar=false);;
int      TimeYearEx(datetime time);;
int      Toolbar.Experts(bool enable);;
string   TradeCommandToStr(int cmd);;
string   UninitializeReasonDescription(int reason);;
string   UrlEncode(string value);;
bool     UseTradeServerPath(string path, string caller = "");;
bool     WaitForTicket(int ticket, bool select = false);;


// include/functions/
void     Bands.UpdateLegend(string label, string name, string status, color bandsColor, double upperValue, double lowerValue, int digits, datetime barOpenTime);;
bool     ConfigureSignals(string name, string &configValue, bool &enabled);;
bool     ConfigureSignalsByMail(string configValue, bool &enabled, string &sender, string &receiver);;
bool     ConfigureSignalsBySMS(string configValue, bool &enabled, string &receiver);;
bool     ConfigureSignalsBySound(string configValue, bool &enabled);;
string   CreateLegend();;
int      ExplodeStrings(int &buffer[], string &results[]);;
bool     HandleCommands(string channel="", bool remove=true);;
int      iBarShiftNext(string symbol=NULL, int period=NULL, datetime time, int mute=NULL);;
int      iBarShiftPrevious(string symbol=NULL, int period=NULL, datetime time, int mute=NULL);;
int      iChangedBars(string symbol=NULL, int timeframe=NULL);;
int      iCopyRates(double target[][6], string symbol=NULL, int timeframe=NULL);;
int      InitializeByteBuffer(int &buffer[], int bytes);;
bool     iPreviousPeriod(int timeframe=NULL, datetime &openTimeFxt, datetime &closeTimeFxt, datetime &openTimeSrv, datetime &closeTimeSrv, bool skipWeekends = true);;
bool     IsBarOpen(int timeframe = NULL);;
bool     IsChartCommand(string channel, bool remove, string &commands[]);;
string   JoinBools(bool &values[], string separator = ", ");;
string   JoinDoubles(double &values[], string separator = ", ");;
string   JoinDoublesEx(double &values[], int digits, string separator = ", ");;
string   JoinInts(int &values[], string separator = ", ");;
bool     ManageDoubleIndicatorBuffer(int id, double buffer[]);;
bool     ParseDateTime(string value, int flags, int &result[]);;
bool     RearrangeLegends();;
bool     RemoveLegend();;
bool     UpdateTrendDirection(double &values[], int offset, double &trend[], double &uptrend[], double &downtrend[], double &uptrend2[], bool enableColoring=false, bool enableUptrend2=false, int lineStyle=EMPTY, int normalizeDigits=EMPTY_VALUE);;
void     UpdateTrendLegend(string legendName, string indicatorName, string status, color uptrendColor, color downtrendColor, double value, int digits, double trend, datetime time);;


// include/functions/ta/
bool     ALMA.CalculateWeights(int periods, double offset, double sigma, double &weights[]);;
double   ATR(string symbol, int timeframe, int periods, int offset);;
double   iADR(int flags = NULL);;
double   JMASeries(int h, int iMaxBar, int iStartbar, int length, int phase, double series, int bar);;
bool     NLMA.CalculateWeights(int cycles, int cyclePeriods, double &weights[]);;


// include/structs/mt4/


// include/structs/rsf/Bar.mqh
datetime bar.Time      (double bar[]);;
double   bar.Open      (double bar[]);;
double   bar.Low       (double bar[]);;
double   bar.High      (double bar[]);;
double   bar.Close     (double bar[]);;
int      bar.Volume    (double bar[]);;

datetime bar.setTime   (double &bar[], datetime time);;
double   bar.setOpen   (double &bar[], double   open);;
double   bar.setLow    (double &bar[], double    low);;
double   bar.setHigh   (double &bar[], double   high);;
double   bar.setClose  (double &bar[], double  close);;
int      bar.setVolume (double &bar[], int    volume);;

datetime bars.Time     (double bar[][], int i);;
double   bars.Open     (double bar[][], int i);;
double   bars.Low      (double bar[][], int i);;
double   bars.High     (double bar[][], int i);;
double   bars.Close    (double bar[][], int i);;
int      bars.Volume   (double bar[][], int i);;

datetime bars.setTime  (double &bar[][], int i, datetime time);;
double   bars.setOpen  (double &bar[][], int i, double   open);;
double   bars.setLow   (double &bar[][], int i, double    low);;
double   bars.setHigh  (double &bar[][], int i, double   high);;
double   bars.setClose (double &bar[][], int i, double  close);;
int      bars.setVolume(double &bar[][], int i, int    volume);;

string   BAR.toStr     (double bar[]);;


// include/structs/rsf/OrderExecution.mqh
int      oe.Error              (/*ORDER_EXECUTION*/int oe[]);;
bool     oe.IsError            (/*ORDER_EXECUTION*/int oe[]);;
string   oe.Symbol             (/*ORDER_EXECUTION*/int oe[]);;
int      oe.Digits             (/*ORDER_EXECUTION*/int oe[]);;
double   oe.StopDistance       (/*ORDER_EXECUTION*/int oe[]);;
double   oe.FreezeDistance     (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Bid                (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Ask                (/*ORDER_EXECUTION*/int oe[]);;
int      oe.Ticket             (/*ORDER_EXECUTION*/int oe[]);;
int      oe.Type               (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Lots               (/*ORDER_EXECUTION*/int oe[]);;
datetime oe.OpenTime           (/*ORDER_EXECUTION*/int oe[]);;
double   oe.OpenPrice          (/*ORDER_EXECUTION*/int oe[]);;
double   oe.StopLoss           (/*ORDER_EXECUTION*/int oe[]);;
double   oe.TakeProfit         (/*ORDER_EXECUTION*/int oe[]);;
datetime oe.CloseTime          (/*ORDER_EXECUTION*/int oe[]);;
double   oe.ClosePrice         (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Swap               (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Commission         (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Profit             (/*ORDER_EXECUTION*/int oe[]);;
string   oe.Comment            (/*ORDER_EXECUTION*/int oe[]);;
int      oe.Duration           (/*ORDER_EXECUTION*/int oe[]);;
int      oe.Requotes           (/*ORDER_EXECUTION*/int oe[]);;
double   oe.Slippage           (/*ORDER_EXECUTION*/int oe[]);;
int      oe.RemainingTicket    (/*ORDER_EXECUTION*/int oe[]);;
double   oe.RemainingLots      (/*ORDER_EXECUTION*/int oe[]);;

int      oe.setError           (/*ORDER_EXECUTION*/int &oe[], int      error     );;
string   oe.setSymbol          (/*ORDER_EXECUTION*/int &oe[], string   symbol    );;
int      oe.setDigits          (/*ORDER_EXECUTION*/int &oe[], int      digits    );;
double   oe.setStopDistance    (/*ORDER_EXECUTION*/int &oe[], double   distance  );;
double   oe.setFreezeDistance  (/*ORDER_EXECUTION*/int &oe[], double   distance  );;
double   oe.setBid             (/*ORDER_EXECUTION*/int &oe[], double   bid       );;
double   oe.setAsk             (/*ORDER_EXECUTION*/int &oe[], double   ask       );;
int      oe.setTicket          (/*ORDER_EXECUTION*/int &oe[], int      ticket    );;
int      oe.setType            (/*ORDER_EXECUTION*/int &oe[], int      type      );;
double   oe.setLots            (/*ORDER_EXECUTION*/int &oe[], double   lots      );;
datetime oe.setOpenTime        (/*ORDER_EXECUTION*/int &oe[], datetime openTime  );;
double   oe.setOpenPrice       (/*ORDER_EXECUTION*/int &oe[], double   openPrice );;
double   oe.setStopLoss        (/*ORDER_EXECUTION*/int &oe[], double   stopLoss  );;
double   oe.setTakeProfit      (/*ORDER_EXECUTION*/int &oe[], double   takeProfit);;
datetime oe.setCloseTime       (/*ORDER_EXECUTION*/int &oe[], datetime closeTime );;
double   oe.setClosePrice      (/*ORDER_EXECUTION*/int &oe[], double   closePrice);;
double   oe.setSwap            (/*ORDER_EXECUTION*/int &oe[], double   swap      );;
double   oe.addSwap            (/*ORDER_EXECUTION*/int &oe[], double   swap      );;
double   oe.setCommission      (/*ORDER_EXECUTION*/int &oe[], double   comission );;
double   oe.addCommission      (/*ORDER_EXECUTION*/int &oe[], double   comission );;
double   oe.setProfit          (/*ORDER_EXECUTION*/int &oe[], double   profit    );;
double   oe.addProfit          (/*ORDER_EXECUTION*/int &oe[], double   profit    );;
string   oe.setComment         (/*ORDER_EXECUTION*/int &oe[], string   comment   );;
int      oe.setDuration        (/*ORDER_EXECUTION*/int &oe[], int      milliSec  );;
int      oe.setRequotes        (/*ORDER_EXECUTION*/int &oe[], int      requotes  );;
double   oe.setSlippage        (/*ORDER_EXECUTION*/int &oe[], double   slippage  );;
int      oe.setRemainingTicket (/*ORDER_EXECUTION*/int &oe[], int      ticket    );;
double   oe.setRemainingLots   (/*ORDER_EXECUTION*/int &oe[], double   lots      );;

int      oes.Error             (/*ORDER_EXECUTION*/int oe[][], int i);;
bool     oes.IsError           (/*ORDER_EXECUTION*/int oe[][], int i);;
string   oes.Symbol            (/*ORDER_EXECUTION*/int oe[][], int i);;
int      oes.Digits            (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.StopDistance      (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.FreezeDistance    (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Bid               (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Ask               (/*ORDER_EXECUTION*/int oe[][], int i);;
int      oes.Ticket            (/*ORDER_EXECUTION*/int oe[][], int i);;
int      oes.Type              (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Lots              (/*ORDER_EXECUTION*/int oe[][], int i);;
datetime oes.OpenTime          (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.OpenPrice         (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.StopLoss          (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.TakeProfit        (/*ORDER_EXECUTION*/int oe[][], int i);;
datetime oes.CloseTime         (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.ClosePrice        (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Swap              (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Commission        (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Profit            (/*ORDER_EXECUTION*/int oe[][], int i);;
string   oes.Comment           (/*ORDER_EXECUTION*/int oe[][], int i);;
int      oes.Duration          (/*ORDER_EXECUTION*/int oe[][], int i);;
int      oes.Requotes          (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.Slippage          (/*ORDER_EXECUTION*/int oe[][], int i);;
int      oes.RemainingTicket   (/*ORDER_EXECUTION*/int oe[][], int i);;
double   oes.RemainingLots     (/*ORDER_EXECUTION*/int oe[][], int i);;

int      oes.setError          (/*ORDER_EXECUTION*/int &oe[][], int i, int error          );;
string   oes.setSymbol         (/*ORDER_EXECUTION*/int &oe[][], int i, string   symbol    );;
int      oes.setDigits         (/*ORDER_EXECUTION*/int &oe[][], int i, int      digits    );;
double   oes.setStopDistance   (/*ORDER_EXECUTION*/int &oe[][], int i, double   distance  );;
double   oes.setFreezeDistance (/*ORDER_EXECUTION*/int &oe[][], int i, double   distance  );;
double   oes.setBid            (/*ORDER_EXECUTION*/int &oe[][], int i, double   bid       );;
double   oes.setAsk            (/*ORDER_EXECUTION*/int &oe[][], int i, double   ask       );;
int      oes.setTicket         (/*ORDER_EXECUTION*/int &oe[][], int i, int      ticket    );;
int      oes.setType           (/*ORDER_EXECUTION*/int &oe[][], int i, int      type      );;
double   oes.setLots           (/*ORDER_EXECUTION*/int &oe[][], int i, double   lots      );;
datetime oes.setOpenTime       (/*ORDER_EXECUTION*/int &oe[][], int i, datetime openTime  );;
double   oes.setOpenPrice      (/*ORDER_EXECUTION*/int &oe[][], int i, double   openPrice );;
double   oes.setStopLoss       (/*ORDER_EXECUTION*/int &oe[][], int i, double   stopLoss  );;
double   oes.setTakeProfit     (/*ORDER_EXECUTION*/int &oe[][], int i, double   takeProfit);;
datetime oes.setCloseTime      (/*ORDER_EXECUTION*/int &oe[][], int i, datetime closeTime );;
double   oes.setClosePrice     (/*ORDER_EXECUTION*/int &oe[][], int i, double   closePrice);;
double   oes.setSwap           (/*ORDER_EXECUTION*/int &oe[][], int i, double   swap      );;
double   oes.addSwap           (/*ORDER_EXECUTION*/int &oe[][], int i, double   swap      );;
double   oes.setCommission     (/*ORDER_EXECUTION*/int &oe[][], int i, double   comission );;
double   oes.addCommission     (/*ORDER_EXECUTION*/int &oe[][], int i, double   comission );;
double   oes.setProfit         (/*ORDER_EXECUTION*/int &oe[][], int i, double   profit    );;
double   oes.addProfit         (/*ORDER_EXECUTION*/int &oe[][], int i, double   profit    );;
string   oes.setComment        (/*ORDER_EXECUTION*/int &oe[][], int i, string   comment   );;
int      oes.setDuration       (/*ORDER_EXECUTION*/int &oe[][], int i, int      milliSec  );;
int      oes.setRequotes       (/*ORDER_EXECUTION*/int &oe[][], int i, int      requotes  );;
double   oes.setSlippage       (/*ORDER_EXECUTION*/int &oe[][], int i, double   slippage  );;
int      oes.setRemainingTicket(/*ORDER_EXECUTION*/int &oe[][], int i, int      ticket    );;
double   oes.setRemainingLots  (/*ORDER_EXECUTION*/int &oe[][], int i, double   lots      );;

string   ORDER_EXECUTION.toStr (/*ORDER_EXECUTION*/int oe[]);;


// include/structs/win32/


// libraries/rsfHistory1.ex4
int      HistoryFile1.Open     (string symbol, int timeframe, string description, int digits, int format, int mode, string directory = "");;
bool     HistoryFile1.Close    (int hFile);;
int      HistoryFile1.FindBar  (int hFile, datetime time, bool lpBarExists[]);;
bool     HistoryFile1.ReadBar  (int hFile, int offset, double bar[]);;
bool     HistoryFile1.WriteBar (int hFile, int offset, double bar[], int flags = NULL);;
bool     HistoryFile1.UpdateBar(int hFile, int offset, double value);;
bool     HistoryFile1.InsertBar(int hFile, int offset, double bar[], int flags = NULL);;
bool     HistoryFile1.MoveBars (int hFile, int fromOffset, int destOffset);;
bool     HistoryFile1.AddTick  (int hFile, datetime time, double value, int flags = NULL);;

int      HistorySet1.Create (string symbol, string description, int digits, int format, string directory = "");;
int      HistorySet1.Get    (string symbol, string directory = "");;
bool     HistorySet1.Close  (int hSet);;
bool     HistorySet1.AddTick(int hSet, datetime time, double value, int flags = NULL);;


// libraries/rsfHistory2.ex4
int      HistoryFile2.Open     (string symbol, int timeframe, string description, int digits, int format, int mode, string directory = "");;
bool     HistoryFile2.Close    (int hFile);;
int      HistoryFile2.FindBar  (int hFile, datetime time, bool lpBarExists[]);;
bool     HistoryFile2.ReadBar  (int hFile, int offset, double bar[]);;
bool     HistoryFile2.WriteBar (int hFile, int offset, double bar[], int flags = NULL);;
bool     HistoryFile2.UpdateBar(int hFile, int offset, double value);;
bool     HistoryFile2.InsertBar(int hFile, int offset, double bar[], int flags = NULL);;
bool     HistoryFile2.MoveBars (int hFile, int fromOffset, int destOffset);;
bool     HistoryFile2.AddTick  (int hFile, datetime time, double value, int flags = NULL);;

int      HistorySet2.Create (string symbol, string description, int digits, int format, string directory = "");;
int      HistorySet2.Get    (string symbol, string directory = "");;
bool     HistorySet2.Close  (int hSet);;
bool     HistorySet2.AddTick(int hSet, datetime time, double value, int flags = NULL);;


// libraries/rsfHistory3.ex4
int      HistoryFile3.Open     (string symbol, int timeframe, string description, int digits, int format, int mode, string directory = "");;
bool     HistoryFile3.Close    (int hFile);;
int      HistoryFile3.FindBar  (int hFile, datetime time, bool lpBarExists[]);;
bool     HistoryFile3.ReadBar  (int hFile, int offset, double bar[]);;
bool     HistoryFile3.WriteBar (int hFile, int offset, double bar[], int flags = NULL);;
bool     HistoryFile3.UpdateBar(int hFile, int offset, double value);;
bool     HistoryFile3.InsertBar(int hFile, int offset, double bar[], int flags = NULL);;
bool     HistoryFile3.MoveBars (int hFile, int fromOffset, int destOffset);;
bool     HistoryFile3.AddTick  (int hFile, datetime time, double value, int flags = NULL);;

int      HistorySet3.Create (string symbol, string description, int digits, int format, string directory = "");;
int      HistorySet3.Get    (string symbol, string directory = "");;
bool     HistorySet3.Close  (int hSet);;
bool     HistorySet3.AddTick(int hSet, datetime time, double value, int flags = NULL);;


// libraries/rsfLib.ex4
int      AddSymbolGroup(int sgs[], string name, string description, color bgColor);;
bool     AquireLock(string mutexName, bool wait);;
bool     ArrayAddInt(int &array[], int value);;
int      ArrayDropBool(bool &array[], bool value);;
int      ArrayDropDouble(double &array[], double value);;
int      ArrayDropInt(int &array[], int value);;
int      ArrayDropString(string &array[], string value);;
int      ArrayInsertBool(bool &array[], int offset, bool value);;
int      ArrayInsertBools(bool &array[], int offset, bool values[]);;
int      ArrayInsertDouble(double &array[], int offset, double value);;
int      ArrayInsertDoubleArray(double &array[][], int offset, double values[]);;
int      ArrayInsertDoubles(double &array[], int offset, double values[]);;
int      ArrayInsertInt(int &array[], int offset, int value);;
int      ArrayInsertInts(int &array[], int offset, int values[]);;
int      ArrayInsertString(string &array[], int offset, string value);;
int      ArrayInsertStrings(string &array[], int offset, string values[]);;
bool     ArrayPopBool(bool &array[]);;
double   ArrayPopDouble(double &array[]);;
int      ArrayPopInt(int &array[]);;
string   ArrayPopString(string &array[]);;
int      ArrayPushBool(bool &array[], bool value);;
int      ArrayPushDouble(double &array[], double value);;
int      ArrayPushDoubles(double &array[][], double values[]);;
int      ArrayPushInt(int &array[], int value);;
int      ArrayPushInts(int &array[][], int values[]);;
int      ArrayPushString(string &array[], string value);;
int      ArrayPushStrings(string &array[][], string values[]);;
int      ArraySetInts(int &array[][], int offset, int values[]);;
bool     ArrayShiftBool(bool &array[]);;
double   ArrayShiftDouble(double &array[]);;
int      ArrayShiftInt(int &array[]);;
string   ArrayShiftString(string &array[]);;
int      ArraySpliceBools(bool &array[], int offset, int length);;
int      ArraySpliceDoubles(double &array[], int offset, int length);;
int      ArraySpliceInts(int &array[], int offset, int length);;
int      ArraySpliceStrings(string &array[], int offset, int length);;
int      ArrayUnshiftBool(bool &array[], bool value);;
int      ArrayUnshiftDouble(double &array[], double value);;
int      ArrayUnshiftInt(int &array[], int value);;
bool     BoolInArray(bool &haystack[], bool needle);;
string   BoolsToStr(bool &array[], string separator);;
int      BufferGetChar(int &buffer[], int pos);;
string   BufferToHexStr(int &buffer[]);;
string   BufferToStr(int &buffer[]);;
string   BufferWCharsToStr(int &buffer[], int from, int length);;
string   CharsToStr(int &array[], string separator);;
string   CharToHexStr(int chr);;
bool     ChartMarker.OrderDeleted_A(int ticket, int digits, color markerColor);;
bool     ChartMarker.OrderDeleted_B(int ticket, int digits, color markerColor, int type, double lots, string symbol, datetime openTime, double openPrice, datetime closeTime, double closePrice);;
bool     ChartMarker.OrderFilled_A(int ticket, int pendingType, double pendingPrice, int digits, color markerColor);;
bool     ChartMarker.OrderFilled_B(int ticket, int pendingType, double pendingPrice, int digits, color markerColor, double lots, string symbol, datetime openTime, double openPrice, string comment);;
bool     ChartMarker.OrderModified_A(int ticket, int digits, color markerColor, datetime modifyTime, double oldOpenPrice, double oldStopLoss, double oldTakeprofit);;
bool     ChartMarker.OrderModified_B(int ticket, int digits, color markerColor, int type, double lots, string symbol, datetime openTime, datetime modifyTime, double oldOpenPrice, double openPrice, double oldStopLoss, double stopLoss, double oldTakeProfit, double takeProfit, string comment);;
bool     ChartMarker.OrderSent_A(int ticket, int digits, color markerColor);;
bool     ChartMarker.OrderSent_B(int ticket, int digits, color markerColor, int type, double lots, string symbol, datetime openTime, double openPrice, double stopLoss, double takeProfit, string comment);;
bool     ChartMarker.PositionClosed_A(int ticket, int digits, color markerColor);;
bool     ChartMarker.PositionClosed_B(int ticket, int digits, color markerColor, int type, double lots, string symbol, datetime openTime, double openPrice, datetime closeTime, double closePrice);;
int      CreateRawSymbol(string name, string description, string group, int digits, string baseCurrency, string marginCurrency, string directory = "");;
string   CreateTempFile(string path, string prefix = "");;
int      DecreasePeriod(int period = 0);;
bool     DeletePendingOrders(color markerColor = CLR_NONE);;
int      DeleteRegisteredObjects();;
bool     DoubleInArray(double &haystack[], double needle);;
bool     DoubleQuoteStrings(string &array[]);;
string   DoublesToStr(double &array[], string separator);;
string   DoublesToStrEx(double &array[], string separator, int digits);;
string   DoubleToStrEx(double value, int digits);;
bool     EditFile(string filename);;
bool     EditFiles(string &filenames[]);;
int      Explode(string input, string separator, string &results[], int limit = NULL);;
int      FileReadLines(string filename, string &result[], bool skipEmptyLines = false);;
int      FindFileNames(string pattern, string &results[], int flags = NULL);;
int      GetAccountNumber();;
string   GetAccountServer();;
int      GetFxtToGmtTimeOffset(datetime fxtTime);;
int      GetFxtToServerTimeOffset(datetime fxtTime);;
int      GetGmtToFxtTimeOffset(datetime gmtTime);;
int      GetGmtToServerTimeOffset(datetime gmtTime);;
string   GetHostName();;
int      GetIniKeys(string fileName, string section, string &keys[]);;
int      GetIniSections(string fileName, string &names[]);;
string   GetLongSymbolName(string symbol);;
string   GetLongSymbolNameOrAlt(string symbol, string altValue = "");;
string   GetLongSymbolNameStrict(string symbol);;
string   GetServerTimezone();;
int      GetServerToFxtTimeOffset(datetime serverTime);;
int      GetServerToGmtTimeOffset(datetime serverTime);;
int      GetSymbolGroups(int sgs[], string directory = "");;
string   GetSymbolName(string symbol);;
string   GetSymbolNameOrAlt(string symbol, string altValue = "");;
string   GetSymbolNameStrict(string symbol);;
string   GetTempPath();;
bool     GetTimezoneTransitions(datetime serverTime, int &prevTransition[], int &nextTransition[]);;
string   GetWindowsShortcutTarget(string lnkFilename);;
color    HSLToRGB(double hsl[3]);;
int      IncreasePeriod(int period = NULL);;
int      InitializeDoubleBuffer(double &buffer[], int size);;
int      InitializeStringBuffer(string &buffer[], int length);;
bool     InsertRawSymbol(int symbol[], string directory = "");;
string   IntegerToBinaryStr(int integer);;
string   IntegerToHexStr(int integer);;
bool     IntInArray(int &haystack[], int needle);;
string   IntsToStr(int &array[], string separator);;
bool     IsRawSymbol(string symbol, string directory = "");;
bool     IsReverseIndexedBoolArray(bool &array[]);;
bool     IsReverseIndexedDoubleArray(double &array[]);;
bool     IsReverseIndexedIntArray(int &array[]);;
bool     IsReverseIndexedStringArray(string &array[]);;
bool     IsTemporaryTradeError(int error);;
int      MergeBoolArrays(bool &array1[], bool &array2[], bool &merged[]);;
int      MergeDoubleArrays(double &array1[], double &array2[], double &merged[]);;
int      MergeIntArrays(int &array1[], int &array2[], int &merged[]);;
int      MergeStringArrays(string &array1[], string &array2[], string &merged[]);;
color    ModifyColor(color rgb, double hue, double saturation, double lightness);;
string   MoneysToStr(double &array[], string separator);;
bool     ObjectCreateRegister(string name, int type, int window, datetime time1, double price1, datetime time2, double price2, datetime time3, double price3);;
string   OperationTypesToStr(int &array[], string separator);;
int      OrderSendEx(string symbol=NULL, int type, double lots, double price, int slippage, double stopLoss, double takeProfit, string comment, int magicNumber, datetime expires, color markerColor, int oeFlags, int &oe[]);;
bool     OrderModifyEx(int ticket, double openPrice, double stopLoss, double takeProfit, datetime expires, color markerColor, int oeFlags, int &oe[]);;
bool     OrderDeleteEx(int ticket, color markerColor, int oeFlags, int &oe[]);;
bool     OrderCloseEx(int ticket, double lots, int slippage, color markerColor, int oeFlags, int &oe[]);;
bool     OrderCloseByEx(int ticket, int opposite, color markerColor, int oeFlags, int &oe[]);;
bool     OrdersClose(int &tickets[], int slippage, color markerColor, int oeFlags, int &oes[][]);;
bool     OrdersCloseSameSymbol(int &tickets[], int slippage, color markerColor, int oeFlags, int &oes[][]);;
int      OrdersHedge(int &tickets[], int slippage, int oeFlags, int &oes[][]);;
bool     OrdersCloseHedged(int &tickets[], color markerColor, int oeFlags, int &oes[][]);;
string   PricesToStr(double &array[], string separator);;
string   RatesToStr(double &array[], string separator);;
bool     ReleaseLock(string mutexName);;
bool     ReverseBoolArray(bool &array[]);;
bool     ReverseDoubleArray(double &array[]);;
bool     ReverseIntArray(int &array[]);;
bool     ReverseStringArray(string &array[]);;
color    RGB(int red, int green, int blue);;
int      RGBToHSL(color rgb, double &hsl[], bool human=false);;
bool     SaveSymbolGroups(int sgs[], string directory = "");;
int      SearchBoolArray(bool &haystack[], bool needle);;
int      SearchDoubleArray(double &haystack[], double needle);;
int      SearchIntArray(int &haystack[], int needle);;
int      SearchStringArray(string &haystack[], string needle);;
int      SearchStringArrayI(string &haystack[], string needle);;
bool     SetRawSymbolTemplate(int symbol[], int type);;
bool     SortOpenTickets(int &keys[][]);;
bool     SortStrings(string &values[]);;
int      SortTicketsChronological(int &tickets[]);;
bool     StringInArray(string &haystack[], string needle);;
bool     StringInArrayI(string &haystack[], string needle);;
string   StringPad(string input, int pad_length, string pad_string=" ", int pad_type=STR_PAD_RIGHT);;
string   StringsToStr(string &array[], string separator);;
double   SumDoubles(double &values[]);;
string   TicketsToStr(int &array[], string separator);;
string   TicketsToStr.Lots(int &array[], string separator);;
string   TicketsToStr.LotsSymbols(int &array[], string separator);;
string   TicketsToStr.Position(int &array[]);;
string   TimesToStr(datetime &array[], string separator);;
string   WaitForSingleObjectValueToStr(int value);;
int      WinExecWait(string cmdLine, int cmdShow);;
string   WordToHexStr(int word);;


// libraries/rsfMT4Expander.dll
bool     AppendLogMessageA(int ec[], datetime time, string message, int error, int level);;
string   BarModelDescription(int id);;
string   BarModelToStr(int id);;
string   BoolToStr(bool value);;
string   CoreFunctionDescription(int func);;
string   CoreFunctionToStr(int func);;
int      CreateDirectoryA(string path, int flags);;
string   DeinitFlagsToStr(int flags);;
bool     DeleteIniKeyA(string fileName, string section, string key);;
bool     DeleteIniSectionA(string fileName, string section);;
int      DoubleExp(double value);;
string   DoubleQuoteStr(string value);;
double   ec_Ask                   (int &ec[]);;
int      ec_Bars                  (int &ec[]);;
double   ec_Bid                   (int &ec[]);;
int      ec_Digits                (int &ec[]);;
int      ec_DllError              (int &ec[]);;
int      ec_DllWarning            (int &ec[]);;
bool     ec_ExternalReporting     (int &ec[]);;
int      ec_hChart                (int &ec[]);;
int      ec_hChartWindow          (int &ec[]);;
datetime ec_CurrTickTime          (int &ec[]);;
string   ec_LogFilename           (int &ec[]);;
int      ec_Loglevel              (int &ec[]);;
int      ec_LoglevelAlert         (int &ec[]);;
int      ec_LoglevelDebugger      (int &ec[]);;
int      ec_LoglevelFile          (int &ec[]);;
int      ec_LoglevelMail          (int &ec[]);;
int      ec_LoglevelSMS           (int &ec[]);;
int      ec_LoglevelTerminal      (int &ec[]);;
int      ec_ModuleDeinitFlags     (int &ec[]);;
int      ec_ModuleInitFlags       (int &ec[]);;
string   ec_ModuleName            (int &ec[]);;
int      ec_ModuleType            (int &ec[]);;
int      ec_ModuleUninitReason    (int &ec[]);;
int      ec_MqlError              (int &ec[]);;
bool     ec_Optimization          (int &ec[]);;
int      ec_Pid                   (int &ec[]);;
double   ec_Pip                   (int &ec[]);;
int      ec_PipDigits             (int &ec[]);;
int      ec_PipPoints             (int &ec[]);;
string   ec_PipPriceFormat        (int &ec[]);;
double   ec_Point                 (int &ec[]);;
int      ec_PreviousPid           (int &ec[]);;
datetime ec_PrevTickTime          (int &ec[]);;
string   ec_PriceFormat           (int &ec[]);;
int      ec_ProgramCoreFunction   (int &ec[]);;
int      ec_ProgramInitReason     (int &ec[]);;
string   ec_ProgramName           (int &ec[]);;
int      ec_ProgramType           (int &ec[]);;
int      ec_ProgramUninitReason   (int &ec[]);;
int      ec_RecordMode            (int &ec[]);;
int      ec_SetDllError           (int &ec[], int error);;
int      ec_SetLoglevel           (int &ec[], int level);;
int      ec_SetLoglevelAlert      (int &ec[], int level);;
int      ec_SetLoglevelDebugger   (int &ec[], int level);;
int      ec_SetLoglevelFile       (int &ec[], int level);;
int      ec_SetLoglevelMail       (int &ec[], int level);;
int      ec_SetLoglevelSMS        (int &ec[], int level);;
int      ec_SetLoglevelTerminal   (int &ec[], int level);;
int      ec_SetMqlError           (int &ec[], int error);;
int      ec_SetProgramCoreFunction(int &ec[], int id);;
int      ec_SetRecordMode         (int &ec[], int mode);;
datetime ec_Started               (int &ec[]);;
bool     ec_SuperContext          (int &ec[], int &target[]);;
string   ec_Symbol                (int &ec[]);;
int      ec_TestBarModel          (int &ec[]);;
int      ec_TestBars              (int &ec[]);;
datetime ec_TestCreated           (int &ec[]);;
datetime ec_TestEndTime           (int &ec[]);;
int      ec_TestId                (int &ec[]);;
bool     ec_Testing               (int &ec[]);;
double   ec_TestSpread            (int &ec[]);;
datetime ec_TestStartTime         (int &ec[]);;
int      ec_TestTicks             (int &ec[]);;
int      ec_TestTradeDirections   (int &ec[]);;
bool     ec_TestVisualMode        (int &ec[]);;
int      ec_Ticks                 (int &ec[]);;
int      ec_Timeframe             (int &ec[]);;
bool     ec_VisualMode            (int &ec[]);;
int      ep_SuperLoglevel         (int pid);;
int      ep_SuperLoglevelAlert    (int pid);;
int      ep_SuperLoglevelDebugger (int pid);;
int      ep_SuperLoglevelFile     (int pid);;
int      ep_SuperLoglevelMail     (int pid);;
int      ep_SuperLoglevelSMS      (int pid);;
int      ep_SuperLoglevelTerminal (int pid);;
string   ep_SuperProgramName      (int pid);;
bool     EmptyIniSectionA(string fileName, string section);;
string   ErrorToStrA(int error);;
string   EXECUTION_CONTEXT_toStr(int &ec[]);;
int      FindTesterWindow();;
int      GetBoolsAddress(bool &values[]);;
int      GetDoublesAddress(double &values[]);;
string   GetExpanderFileNameA();;
string   GetExpanderFileNameW();;
string   GetFinalPathNameA(string name);;
string   GetGlobalConfigPathA();;
datetime GetGmtTime32();;
datetime GetGmtTime64();;
string   GetHistoryRootPathA();;
string   GetHistoryRootPathW();;
int      GetIniKeysA(string fileName, string section, int &buffer[], int bufferSize);;
int      GetIniSectionsA(string fileName, int &buffer[], int bufferSize);;
string   GetIniStringA(string fileName, string section, string key, string defaultValue);;
string   GetIniStringRawA(string fileName, string section, string key, string defaultValue);;
string   GetInternalWindowTextA(int hWnd);;
int      GetIntsAddress(int &values[]);;
int      GetLastWin32Error();;
datetime GetLocalTime32();;
datetime GetLocalTime64();;
string   GetMqlDirectoryA();;
string   GetMqlDirectoryW();;
string   GetReparsePointTargetA(string name);;
string   GetStringA(int address);;
string   GetStringW(int address);;
int      GetStringAddress(string value);;
int      GetStringsAddress(string &values[]);;
int      GetTerminalBuild();;
string   GetTerminalConfigPathA();;
int      GetTerminalMainWindow();;
string   GetTerminalCommonDataPathA();;
string   GetTerminalCommonDataPathW();;
string   GetTerminalDataPathA();;
string   GetTerminalDataPathW();;
string   GetTerminalPathW();;
string   GetTerminalFileNameA();;
string   GetTerminalRoamingDataPathA();;
string   GetTerminalRoamingDataPathW();;
string   GetTerminalVersion();;
int      GetUIThreadId();;
double   GetWindowDoubleA(int hWnd, string name);;
int      GetWindowIntegerA(int hWnd, string name);;
string   GetWindowStringA(int hWnd, string name);;
string   GmtTimeFormatA(datetime time, string format);;
datetime GmtToLocalTime(datetime time);;
string   InitFlagsToStr(int flags);;
bool     InitializeBOOLArray  (bool   &values[], int size, int    initValue, int from, int count);;
bool     InitializeBoolArray  (bool   &values[], int size, bool   initValue, int from, int count);;
bool     InitializeCharArray  (char   &values[], int size, char   initValue, int from, int count);;
bool     InitializeDoubleArray(double &values[], int size, double initValue, int from, int count);;
bool     InitializeFloatArray (float  &values[], int size, float  initValue, int from, int count);;
bool     InitializeIntArray   (int    &values[], int size, int    initValue, int from, int count);;
bool     InitializeLongArray  (long   &values[], int size, long   initValue, int from, int count);;
bool     InitializeShortArray (short  &values[], int size, short  initValue, int from, int count);;
string   InitializeReasonToStr(int reason);;
string   InitReasonToStr(int reason);;
string   IntToHexStr(int value);;
bool     IsCustomTimeframe(int timeframe);;
bool     IsDirectoryA(string path, int mode);;
bool     IsFileA(string path, int mode);;
bool     IsFileOrDirectoryA(string path);;
bool     IsGlobalConfigKeyA(string section, string key);;
bool     IsIniKeyA(string fileName, string section, string key);;
bool     IsIniSectionA(string fileName, string section);;
bool     IsJunctionA(string path);;
bool     IsProgramType(int type);;
bool     IsStandardTimeframe(int timeframe);;
bool     IsSymlinkA(string path);;
bool     IsTerminalConfigKeyA(string section, string key);;
bool     IsUIThread(int threadId = NULL);;
bool     IsVirtualKeyDown(int vKey);;
int      LeaveContext(int &ec[]);;
bool     LoadMqlProgramA(int hChart, int programType, string programName);;
bool     LoadMqlProgramW(int hChart, int programType, string programName);;
string   LocalTimeFormatA(datetime time, string format);;
datetime LocalToGmtTime(datetime time);;
string   LoglevelToStr(int level);;
string   lpEXECUTION_CONTEXT_toStr(int lpEc);;
double   MathLog10(double value);;
string   MD5Hash(int &input[], int length);;
string   MD5HashA(string str);;
bool     MemCompare(int lpBufferA, int lpBufferB, int size);;
string   ModuleTypeDescription(int type);;
string   ModuleTypeToStr(int type);;
int      MT4InternalMsg();;
string   NumberFormat(double value, string format);;
string   OrderTypeDescription(int type);;
string   PeriodToStr(int period);;
string   ProgramTypeDescription(int type);;
string   ProgramTypeToStr(int type);;
bool     ReleaseTickTimer(int timerId);;
double   RemoveWindowDoubleA(int hWnd, string name);;
int      RemoveWindowIntegerA(int hWnd, string name);;
string   RemoveWindowStringA(int hWnd, string name);;
bool     ReopenAlertDialog(int sound);;
bool     SetLogfileA(int ec[], string filename);;
int      SetupTickTimer(int hWnd, int millis, int flags);;
bool     SetWindowDoubleA(int hWnd, string name, double value);;
bool     SetWindowIntegerA(int hWnd, string name, int value);;
bool     SetWindowStringA(int hWnd, string name, string value);;
bool     ShiftBOOLIndicatorBuffer  (bool   &buffer[], int size, int count, int    emptyValue);;
bool     ShiftBoolIndicatorBuffer  (bool   &buffer[], int size, int count, bool   emptyValue);;
bool     ShiftCharIndicatorBuffer  (char   &buffer[], int size, int count, char   emptyValue);;
bool     ShiftDoubleIndicatorBuffer(double &buffer[], int size, int count, double emptyValue);;
bool     ShiftFloatIndicatorBuffer (float  &buffer[], int size, int count, float  emptyValue);;
bool     ShiftIntIndicatorBuffer   (int    &buffer[], int size, int count, int    emptyValue);;
bool     ShiftLongIndicatorBuffer  (long   &buffer[], int size, int count, long   emptyValue);;
bool     ShiftShortIndicatorBuffer (short  &buffer[], int size, int count, short  emptyValue);;
string   ShowWindowCmdToStr(int cmdShow);;
bool     SortMqlStringsA(string values[], int size);;
bool     SortMqlStringsW(string values[], int size);;
bool     StrCompare(string s1, string s2);;
bool     StrEndsWith(string str, string suffix);;
string   StringToStr(string str);;
bool     StrIsNull(string str);;
bool     StrStartsWith(string str, string prefix);;
int      SyncLibContext_deinit(int &ec[], int uninitReason);;
int      SyncLibContext_init(int &ec[], int uninitReason, int initFlags, int deinitFlags, string name, string symbol, int timeframe, int digits, double point, int isTesting, int isOptimization);;
int      SyncMainContext_deinit(int &ec[], int uninitReason);;
int      SyncMainContext_init(int &ec[], int programType, string programName, int uninitReason, int initFlags, int deinitFlags, string symbol, int timeframe, int digits, double point, int recordMode, int isTesting, int isVisualMode, int isOptimization, int isExternalReporting, int lpSec, int hChart, int droppedOnChart, int droppedOnPosX, int droppedOnPosY);;
int      SyncMainContext_start(int &ec[], double &rates[][], int bars, int changedBars, int ticks, datetime tickTime, double bid, double ask);;
bool     TerminalIsPortableMode();;
bool     Test_onPositionOpen(int &ec[], int ticket, int type, double lots, string symbol, datetime openTime, double openPrice, double stopLoss, double takeProfit, double commission, int magicNumber, string comment);;
bool     Test_onPositionClose(int &ec[], int ticket, datetime closeTime, double closePrice, double swap, double profit);;
double   Test_GetCommission(int &ec[], double lots);;
bool     Test_InitReporting(int &ec[], datetime from, int bars);;
bool     Test_StopReporting(int &ec[], datetime to, int bars);;
int      Tester_GetBarModel();;
datetime Tester_GetStartDate();;
datetime Tester_GetEndDate();;
string   TimeframeToStr(int timeframe);;
string   TradeDirectionDescription(int direction);;
string   TradeDirectionToStr(int direction);;
string   UninitializeReasonToStr(int reason);;
string   UninitReasonToStr(int reason);;
int      WM_MT4();;
